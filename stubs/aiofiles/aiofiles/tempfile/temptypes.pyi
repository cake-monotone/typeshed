from asyncio.events import AbstractEventLoop
from tempfile import TemporaryDirectory
from typing import Any, AnyStr, Generic, Iterable

from ..base import AsyncBase

class AsyncSpooledTemporaryFile(Generic[AnyStr], AsyncBase[AnyStr]):
    # delegated functions from file
    async def fileno(self) -> int: ...
    async def rollover(self) -> None: ...
    async def close(self) -> None: ...
    async def flush(self) -> None: ...
    async def isatty(self) -> bool: ...
    async def newlines(self) -> str | tuple[str, ...] | None: ...
    async def read(self, n: int = ...) -> AnyStr: ...
    async def readline(self, limit: int = ...) -> AnyStr: ...
    async def readlines(self, hint: int = ...) -> list[AnyStr]: ...
    async def seek(self, offset: int, whence: int = ...) -> int: ...
    async def tell(self) -> int: ...
    async def truncate(self, size: int | None = ...) -> int: ...
    # proxied property from file
    @property
    def closed(self) -> bool: ...
    @property
    def encoding(self) -> str: ...
    @property
    def mode(self) -> str: ...
    @property
    def name(self) -> str: ...
    async def write(self, s: AnyStr) -> int: ...
    async def writelines(self, iterable: Iterable[AnyStr]) -> None: ...

class AsyncTemporaryDirectory(Generic[AnyStr]):
    def __init__(self, file: TemporaryDirectory[AnyStr], loop: AbstractEventLoop, executor: Any | None) -> None: ...
    async def cleanup(self) -> None: ...
    async def close(self) -> None: ...
    @property
    def name(self) -> str: ...
